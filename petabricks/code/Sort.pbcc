#ifndef SORT_PBCC
#define SORT_PBCC

#define SORTSUBARRAY SortSubArray
#include "Quicksort.pbcc"
#include "Insertionsort.pbcc"
#include "Radixsort.pbcc"
#include "Parallel_Mergesort.pbcc"
#include "Mergesort.pbcc"

transform SortSubArray
from IN[n], Pos
to OUT[n], TEMP[n]
{
  rule MergeSort2
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray<1>(out, temp, in, p);
  }
  rule MergeSort4
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray<2>(out, temp, in, p);
  }
  rule MergeSort8
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray<3>(out, temp, in, p);
  }
  rule MergeSort16
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray<4>(out, temp, in, p);
  }
  rule MergeSort32
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    MergesortSubArray<5>(out, temp, in, p);
  }
  rule QuickSort
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    QuicksortSubArray(out, temp, in, p);
  }
  rule RadixSort
  to (OUT out, TEMP temp) from (IN in, Pos p)
  {
    RadixsortSubArray(out, temp, in, p);
  }
  rule InsertionSort
  to (OUT out, TEMP temp) from (IN in)
  {
    InsertionsortSubArray(out, in);
  }
}

transform Sort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in) using(temp[n])
  {
    Copy1D(out, in);
    SortSubArray(out, temp, in, 60);
  }
}

#endif // SORT_PBCC

